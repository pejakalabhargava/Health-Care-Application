
package com.odl.userinterface;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.odl.bean.ObservationData;
import com.odl.bean.User;
import com.odl.facade.ODLDataFacade;

/**
 * The Class PatientViewHealthFriends.
 *
 * @author pejakalabhargava
 * @author amitkatti 
 */
public class PatientViewHealthFriends extends javax.swing.JFrame {
	    
		/** The user. */
		User user;
	    
    	/** The parent frame. */
    	PatientLandingScreen parentFrame;
        
        /** The data facade. */
        ODLDataFacade dataFacade = new ODLDataFacade();
	   
   	/** The patient list. */
   	Map<String,String>  patientList = new HashMap<String,String>();
	   
    /**
     * Creates new form ViewObservation.
     *
     * @param user the user
     * @param landingFrameForUser the landing frame for user
     */
	    public PatientViewHealthFriends(User user, PatientLandingScreen landingFrameForUser) {
		    this.user = user;
		    parentFrame = landingFrameForUser;
		    patientList = dataFacade.populateAllPatients();
			initComponents();
		}
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Viewing Health Friends");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 33, 0));
        jLabel1.setText("View Health Friend Observations");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Select a Helath Friend:");

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("View Observation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
     
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 349, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        this.setLocationRelativeTo(null);
        populateComboBox();
    }// </editor-fold>                        

    /**
     * Populate combo box.
     */
    private void populateComboBox() {
    	List<String> friends = dataFacade.populateHelathfriendsList(user);
    	if(friends == null || friends.isEmpty()) {
    		jComboBox1.setVisible(false);
    		jTextArea1.setText("There are no helth friends for you.");
    	}
    	for (Iterator iterator = friends.iterator(); iterator.hasNext();) {
			String string = (String) iterator.next();
			jComboBox1.addItem(getKeyByValue(string));
		}
    }
    
    /**
     * Gets the key by value.
     *
     * @param value the value
     * @return the key by value
     */
    private  String getKeyByValue(String value) {
        for (Entry<String, String> entry : patientList.entrySet()) {
            if (value.equals(entry.getValue())) {
                return entry.getKey();
            }
        }
        return null;
    }

	/**
	 * J button1 action performed.
	 *
	 * @param evt the evt
	 */
	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
		    if(parentFrame != null) {parentFrame.setVisible(true);}
		    dispose();
	}                                        

	/**
	 * J button2 action performed.
	 *
	 * @param evt the evt
	 */
	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		jTextArea1.setText("");
		jButton2.setEnabled(false);
		jComboBox1.setEnabled(false);
		String patientName = (String) jComboBox1.getSelectedItem();
		String id = patientList.get(patientName);
		User user = new User();
		user.setUserID(id);
		dataFacade.getObservationDataForUser(user);
		for (Iterator<ObservationData> iterator = user.getObservationData().iterator(); iterator.hasNext();) {
			ObservationData type = (ObservationData) iterator.next();
			jTextArea1.append(type.toString());
			jTextArea1.append("\n");
			jTextArea1.append("----------------------------------------------------\n");
		}
		if(user.getObservationData() == null || user.getObservationData().isEmpty()){
			jTextArea1.append("There are no Observations for  this patient.");
		}
		jButton2.setEnabled(true);
		jComboBox1.setEnabled(true);
	}

    /**
     * J combo box1 action performed.
     *
     * @param evt the evt
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    /**
     * J combo box1 item state changed.
     *
     * @param evt the evt
     */
    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
    	jTextArea1.setText("");
    }                                           

    /**
     * The main method.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientViewHealthFriends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientViewHealthFriends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientViewHealthFriends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientViewHealthFriends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientViewHealthFriends(null,null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    /** The j button1. */
    private javax.swing.JButton jButton1;
    
    /** The j button2. */
    private javax.swing.JButton jButton2;
    
    /** The j combo box1. */
    private javax.swing.JComboBox jComboBox1;
    
    /** The j label1. */
    private javax.swing.JLabel jLabel1;
    
    /** The j label2. */
    private javax.swing.JLabel jLabel2;
    
    /** The j scroll pane2. */
    private javax.swing.JScrollPane jScrollPane2;
    
    /** The j text area1. */
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}
